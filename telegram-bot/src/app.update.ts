import { Ctx, Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { allList } from './app.allList';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { Context } from './context.interface';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>, 
    private readonly appService: AppService
    ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hello! Friend üëãüèº');
    await ctx.reply('–ú–µ–Ω—è –∑–æ–≤—É—Ç Notes Bot - —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏. –ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ò∫Ô∏è');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  async creatNote(ctx: Context) {
    ctx.session.type = 'create'
    await ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É:')
  }

  @Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
  async listNotes(ctx: Context){
    const notes = await this.appService.getAll()
    console.log(notes);
    await ctx.deleteMessage()
    await ctx.reply(allList(notes)) 
  }

  @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneNote(ctx: Context) {
    ctx.session.type = 'done'
    await ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏ ‚Ññ –∑–∞–º–µ—Ç–∫–∏:')
  }

  @Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
  async editNote(ctx: Context) {
    ctx.session.type = 'edit'
    await ctx.deleteMessage()
    await ctx.replyWithHTML(
			'–ù–∞–ø–∏—à–∏ ‚Ññ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
				'–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'
		)
  }

  @Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
  async deleteNote(ctx: Context) {
    ctx.session.type = 'remove'
    await ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏ ‚Ññ –∑–∞–º–µ—Ç–∫–∏:')
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
   if(!ctx.session.type) return

   if(ctx.session.type === 'create') {
    const note = await this.appService.newNote(message)
      await ctx.reply(allList(note))
   }

   if(ctx.session.type === 'done') {
    const note = await this.appService.doneNote(Number(message))


      if(!note) {
        console.log('–∑–∞—à—ë–ª');
        await ctx.deleteMessage()
        await ctx.reply('–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º ‚Ññ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
    }
    await ctx.reply(allList(note))
   }

   if(ctx.session.type === 'remove') {
    const note = await this.appService.deleteNote(Number(message))

      if(!note) {
      console.log('–∑–∞—à—ë–ª');
      await ctx.deleteMessage()
      await ctx.reply('–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º ‚Ññ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
     }   
    await ctx.reply(allList(note))
   }

   if(ctx.session.type === 'edit') {
    const [noteId, noteName] = message.split(': ')
    const note = await this.appService.editNote(Number(noteId), noteName)

     if(!note) {
       console.log('–∑–∞—à—ë–ª');
       await ctx.deleteMessage()
       await ctx.reply('–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º ‚Ññ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
       return
     }
      await ctx.reply(allList(note))
   }
  }
}
